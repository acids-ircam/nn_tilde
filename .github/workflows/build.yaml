name: Build nn_tilde
on:
  push:
    tags:
      - "v*"

jobs:
  osx-arm64-build:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - run: | 
          git submodule update --init --recursive
          git fetch --tags
          GIT_TRACE=1 git describe --tags --always
      - name: Setup LLVM
        run: |
          brew install llvm 

      - name: Setup miniconda
        run: |
          curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh > miniconda.sh
          chmod +x ./miniconda.sh
          bash ./miniconda.sh -b -u -p ./env
          source ./env/bin/activate
          pip install -r requirements.txt
          conda install -c conda-forge curl
      - name: Setup puredata
        run: |
          mkdir puredata_include
          curl -L https://raw.githubusercontent.com/pure-data/pure-data/master/src/m_pd.h -o puredata_include/m_pd.h
      - name: Build
        run: |
          mkdir build
          export CC=$(brew --prefix llvm)/bin/clang
          export CXX=$(brew --prefix llvm)/bin/clang++
          cd build
          cmake ../src -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_PREFIX_PATH=${{ github.workspace }}/env/lib/python3.12/site-packages/torch -DCMAKE_BUILD_TYPE=Release -DPUREDATA_INCLUDE_DIR=${{ github.workspace }}/puredata_include -DCMAKE_OSX_ARCHITECTURES=arm64
          make
      - name: Max/MSP Package creation
        run: |
          mkdir nn_tilde
          mkdir nn_tilde/help
          echo "current folder : $(pwd)"
          echo "current folder ls"
          ls
          echo "current src dir"
          ls src/
          mv src/externals nn_tilde
          # mv src/docs nn_tilde
          cp src/frontend/maxmsp/nn_tilde/nn~.maxhelp nn_tilde/help
          tar -czvf nn_max_msp_macOS_arm64.tar.gz nn_tilde
      - name: PureData Package creation
        run: |
          rm -fr nn_tilde
          mv build/frontend/puredata/nn_tilde .
          mv src/frontend/puredata/nn_tilde/nn~-help.pd nn_tilde
          rm -fr nn_tilde/CMakeFiles/ nn_tilde/*.cmake nn_tilde/Makefile
          tar -czvf nn_puredata_macOS_arm64.tar.gz nn_tilde
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: nn_tilde_mac_arm64
          path: |
            nn_max_msp_macOS_arm64.tar.gz
            nn_puredata_macOS_arm64.tar.gz

  osx-x64-build:
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - run: | 
          git submodule update --init --recursive
          git fetch --tags
          git describe --tags --always

      - name: Install x86_64 Homebrew
        run: |
          sudo rm -rf /opt/homebrew
          sudo rm -rf /usr/local/homebrew
          sudo mkdir -p /usr/local/homebrew
          sudo chown -R $(whoami) /usr/local/homebrew
          arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" --prefix=/usr/local/homebrew
          arch -x86_64 /usr/local/bin/brew shellenv >> $GITHUB_ENV

      - name: Setup miniconda
        run: |
          curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh > miniconda.sh
          chmod 777 ./miniconda.sh
          bash ./miniconda.sh -b -u -p ./env
          source ./env/bin/activate
          arch -x86_64 pip install -r requirements.txt
          arch -x86_64 pip install cmake==3.28
          arch -x86_64 conda install -c conda-forge curl
          TARGET_DIR=$(find env/lib -type d -name "python3*")
          TARGET_DIR="${TARGET_DIR}/site-packages/torch/share/cmake/Caffe2/public"
          cp install/mkl.cmake "${TARGET_DIR}"  

      - name: Setup LLVM
        run: |
          rm '/usr/local/bin/pydoc3'
          rm /usr/local/bin/pydoc3.13
          rm /usr/local/bin/python3
          rm /usr/local/bin/python3-config
          rm /usr/local/bin/python3.13
          rm /usr/local/bin/python3.13-config
          rm '/usr/local/bin/pip3.13'
          rm '/usr/local/bin/idle3'
          rm '/usr/local/bin/idle3.13'
          arch -x86_64 /usr/local/bin/brew install llvm
          export LDFLAGS="-L/usr/local/opt/llvm/lib"
          export CPPFLAGS="-I/usr/local/opt/llvm/include"

      - name: Setup puredata
        run: |
          mkdir puredata_include
          curl -L https://raw.githubusercontent.com/pure-data/pure-data/master/src/m_pd.h -o puredata_include/m_pd.h

      - name: Build
        run: |
          mkdir build
          export CC=$(/usr/local/bin/brew --prefix llvm)/bin/clang
          export CXX=$(/usr/local/bin/brew --prefix llvm)/bin/clang++
          cd build
          arch -x86_64 ../env/bin/cmake ../src -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_PREFIX_PATH=${{ github.workspace }}/env/lib/python3.12/site-packages/torch -DCMAKE_BUILD_TYPE=Release -DPUREDATA_INCLUDE_DIR=${{ github.workspace }}/puredata_include -DCMAKE_OSX_ARCHITECTURES=x86_64
          arch -x86_64 make
      - name: Max/MSP Package creation
        run: |
          mkdir nn_tilde
          mkdir nn_tilde/help
          mv src/externals nn_tilde
          cp src/frontend/maxmsp/nn_tilde/nn~.maxhelp nn_tilde/help
          tar -czvf nn_max_msp_macOS_x64.tar.gz nn_tilde
      - name: PureData Package creation
        run: |
          rm -fr nn_tilde
          mv build/frontend/puredata/nn_tilde .
          mv src/frontend/puredata/nn_tilde/nn~-help.pd nn_tilde
          rm -fr nn_tilde/CMakeFiles/ nn_tilde/*.cmake nn_tilde/Makefile
            tar -czvf nn_puredata_macOS_x64.tar.gz nn_tilde
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: nn_tilde_mac_x86_64
          path: |
            nn_max_msp_macOS_x64.tar.gz
            nn_puredata_macOS_x64.tar.gz

  linux:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            runs-on: ubuntu-latest
            artifact-name: nn_linux_puredata_x86_64
            conda-url: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
          - arch: arm64
            runs-on: ubuntu-24.04-arm
            conda-url: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh
            artifact-name: nn_linux_puredata_arm64
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - run: | 
          git submodule update --init --recursive
          git fetch --tags
          GIT_TRACE=1 git describe --tags --always
      - name: Setup LLVM
        run: |
          sudo apt-get install -y ca-certificates
          sudo apt install gcc-10 g++-10
      - name: Setup miniconda
        run: |
          echo "architecture : $(uname -m)"
          curl --cacert /etc/ssl/certs/ca-certificates.crt -L ${{ matrix.conda-url }} > miniconda.sh
          chmod +x ./miniconda.sh
          bash ./miniconda.sh -b -u -p ./env
          source ./env/bin/activate
          pip3 install torch --index-url https://download.pytorch.org/whl/cpu
          pip install -r requirements.txt
          conda install -c conda-forge curl
      - name: Setup puredata
        run: |
          mkdir puredata_include
          curl --cacert /etc/ssl/certs/ca-certificates.crt -L https://raw.githubusercontent.com/pure-data/pure-data/master/src/m_pd.h -o puredata_include/m_pd.h
      - name: Build
        run: |
          mkdir build
          export CC=$(which gcc-10)
          export CXX=$(which g++-10)
          cd build
          cmake ../src -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_PREFIX_PATH=${{ github.workspace }}/env/lib/python3.12/site-packages/torch -DCMAKE_BUILD_TYPE=Release -DPUREDATA_INCLUDE_DIR=${{ github.workspace }}/puredata_include
          make
      - name: PureData Package creation
        run: |
          mkdir nn_tilde
          mv build/frontend/puredata/nn_tilde .
          mv src/frontend/puredata/nn_tilde/nn~-help.pd nn_tilde
          rm -fr nn_tilde/CMakeFiles/ nn_tilde/*.cmake nn_tilde/Makefile
          tar -czvf ${{ matrix.artifact-name }}.tar.gz nn_tilde
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: 
            ${{ matrix.artifact-name }}.tar.gz

  windows-x64-build:
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - run: | 
          git submodule update --init --recursive
          git fetch --tags
      - name: Downloading Torch 
        run: |
          curl -L https://download.pytorch.org/libtorch/cpu/libtorch-win-shared-with-deps-2.6.0%2Bcpu.zip > "libtorch.zip"
          unzip libtorch.zip
      - name: Setup puredata
        run: |
          mkdir pd
          cd pd
          curl -L https://msp.ucsd.edu/Software/pd-0.55-2.msw.zip -o pd.zip
          unzip pd.zip
          mv pd*/src .
          mv pd*/bin .
          cd ..
      - name: Installing dependencies with vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg 
          ./bootstrap-vcpkg.bat
          ./vcpkg.exe integrate install
          ./vcpkg.exe install curl
          cd ..

      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../src -G "Visual Studio 17 2022" -DTorch_DIR=${{ github.workspace }}/libtorch/share/cmake/Torch -DPUREDATA_INCLUDE_DIR=${{ github.workspace }}/pd/src -DPUREDATA_BIN_DIR=${{ github.workspace }}/pd/bin -A x64
          cmake --build . --config Release
          
      - name: Max/MSP Package creation
        run: |
          mkdir nn_tilde
          mkdir nn_tilde/help
          mv src/externals nn_tilde
          cp src/frontend/maxmsp/nn_tilde/nn~.maxhelp nn_tilde/help
          mkdir nn_tilde/support
          cp libtorch/lib/* nn_tilde/support
          cp vcpkg/installed/x64-windows/lib/*.lib nn_tilde/support
          cp vcpkg/installed/x64-windows/bin/*.dll nn_tilde/support
          curl -L https://curl.se/ca/cacert.pem -o nn_tilde/support/cacert.pem
          tar -czvf nn_max_msp_windows_x64.tar.gz nn_tilde
      - name: PureData Package creation
        run: |
          Remove-Item -Recurse -Force nn_tilde
          mkdir nn_tilde
          mv build/frontend/puredata/nn_tilde/Release/* nn_tilde/
          cp libtorch/lib/* nn_tilde/
          cp vcpkg/installed/x64-windows/lib/*.lib nn_tilde/
          cp vcpkg/installed/x64-windows/bin/*.dll nn_tilde/
          curl -L https://curl.se/ca/cacert.pem -o nn_tilde/cacert.pem
          tar -czvf nn_puredata_windows_x64.tar.gz nn_tilde
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: nn_tilde_win_x64
          path: |
            nn_max_msp_windows_x64.tar.gz
            nn_puredata_windows_x64.tar.gz

  AutomaticRelease:
    runs-on: ubuntu-latest
    needs: [osx-arm64-build, osx-x64-build, linux, windows-x64-build]
    steps:
      - name: Download build binaries (mac_arm64)
        uses: actions/download-artifact@v4
        with:
          name: nn_tilde_mac_arm64
      - name: Download build binaries (mac_x86_64)
        uses: actions/download-artifact@v4
        with:
          name: nn_tilde_mac_x86_64
      - name: Download build binaries (linux_x86_64)
        uses: actions/download-artifact@v4
        with:
          name: nn_linux_puredata_x86_64
      - name: Download build binaries (linux arm64)
        uses: actions/download-artifact@v4
        with:
          name: nn_linux_puredata_arm64
      - name: Download build binaries (windows mac_x86_64)
        uses: actions/download-artifact@v4
        with:
          name: nn_tilde_win_x64 
      - name: Automated Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            nn_max_msp_macOS_arm64.tar.gz
            nn_puredata_macOS_arm64.tar.gz
            nn_max_msp_macOS_x64.tar.gz
            nn_puredata_macOS_x64.tar.gz
            nn_linux_puredata_x86_64.tar.gz
            nn_linux_puredata_arm64.tar.gz
            nn_max_msp_windows_x64.tar.gz
            nn_puredata_windows_x64.tar.gz


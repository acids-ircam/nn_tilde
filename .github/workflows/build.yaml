name: Build nn_tilde
on:
  push:
    tags:
      - "v*"
jobs:
  macos-arm64-build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup torch
        run: |
          curl -L https://download.pytorch.org/libtorch/cpu/libtorch-macos-arm64-2.5.1.zip -o libtorch.zip
          unzip libtorch.zip
      - name: Setup puredata
        run: |
          mkdir puredata_include
          curl -L https://raw.githubusercontent.com/pure-data/pure-data/master/src/m_pd.h -o puredata_include/m_pd.h
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../src \
            -DCMAKE_PREFIX_PATH=${{ github.workspace }}/libtorch \
            -DPUREDATA_INCLUDE_DIR=${{ github.workspace }}/puredata_include \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=arm64
          make
      - name: PureData Package creation
        run: |
          mv build/frontend/puredata/nn_tilde .
          rm -fr nn_tilde/CMakeFiles/ nn_tilde/*.cmake nn_tilde/Makefile
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: nn_tilde-macos_arm64
          path: nn_tilde

  macos-amd64-build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup torch
        run: |
          curl -L https://download.pytorch.org/libtorch/nightly/cpu/libtorch-macos-x86_64-latest.zip -o libtorch.zip
          # curl -L https://download.pytorch.org/libtorch/cpu/libtorch-macos-x86_64-2.2.2.zip -o libtorch.zip
          unzip libtorch.zip
      - name: Setup puredata
        run: |
          mkdir puredata_include
          curl -L https://raw.githubusercontent.com/pure-data/pure-data/master/src/m_pd.h -o puredata_include/m_pd.h
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../src \
            -DCMAKE_PREFIX_PATH=${{ github.workspace }}/libtorch \
            -DPUREDATA_INCLUDE_DIR=${{ github.workspace }}/puredata_include \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=x86_64
          make
      - name: PureData Package creation
        run: |
          mv build/frontend/puredata/nn_tilde .
          rm -fr nn_tilde/CMakeFiles/ nn_tilde/*.cmake nn_tilde/Makefile
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: nn_tilde-macos_amd64
          path: nn_tilde

  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        cuda: [cpu, cuda]
        exclude:
          - arch: arm64
            cuda: cuda
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup torch for AMD64
        if: matrix.arch == 'amd64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgomp1
          CUDA_URL=""
          if [ "${{ matrix.cuda }}" = "cuda" ]; then
            CUDA_URL="https://download.pytorch.org/libtorch/cu121/libtorch-cxx11-abi-shared-with-deps-2.5.1%2Bcu121.zip"
          else
            CUDA_URL="https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-2.5.1%2Bcpu.zip"
          fi
          curl -L $CUDA_URL -o libtorch.zip
          unzip libtorch.zip
          echo "TORCH_PATH=${{ github.workspace }}/libtorch" >> $GITHUB_ENV
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
          echo "RANLIB=ranlib" >> $GITHUB_ENV
      - name: Setup torch for ARM64
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            libjpeg-dev libopenblas-dev libopenmpi-dev libomp-dev libgomp1
          mkdir -p torch_arm64
          cd torch_arm64
          python3 -m pip download torch==2.5.1 \
            --only-binary=:all: \
            --platform manylinux2014_aarch64 \
            --python-version "3.10" \
            --implementation cp \
            --abi cp310 \
            --no-deps \
            --index-url https://pypi.org/simple
          unzip torch-2.5.1-cp310-cp310-manylinux2014_aarch64.whl
          rm torch-2.5.1-cp310-cp310-manylinux2014_aarch64.whl
          cd ..
          echo "TORCH_PATH=${{ github.workspace }}/torch_arm64/torch" >> $GITHUB_ENV
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "RANLIB=aarch64-linux-gnu-ranlib" >> $GITHUB_ENV
      - name: Setup puredata
        run: |
          mkdir puredata_include
          curl -L https://raw.githubusercontent.com/pure-data/pure-data/master/src/m_pd.h -o puredata_include/m_pd.h
      - name: Setup CUDA dependencies
        if: matrix.arch == 'amd64' && matrix.cuda == 'cuda'
        run: |
          sudo apt-get update
          sudo apt-get install -y nvidia-cuda-toolkit
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../src \
            -DCMAKE_PREFIX_PATH=${{ env.TORCH_PATH }} \
            -DPUREDATA_INCLUDE_DIR=${{ github.workspace }}/puredata_include \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=${{ env.CC }} \
            -DCMAKE_CXX_COMPILER=${{ env.CXX }}
          make
          ${{ env.RANLIB }} backend/libbackend.a
          make

      - name: PureData Package creation
        run: |
          mkdir -p nn_tilde
          mv build/frontend/puredata/nn~.pd_linux nn_tilde/
          mv build/lib*.so* nn_tilde/
          # Find and copy the exact libgomp that the system is using
          LIBGOMP_PATH=$(ldd build/frontend/puredata/nn~.pd_linux | grep libgomp | awk '{print $3}')
          if [ ! -z "$LIBGOMP_PATH" ]; then
            cp "$LIBGOMP_PATH" nn_tilde/libgomp-98b21ff3.so.1
          else
            echo "Warning: Could not find libgomp dependency in ldd output"
            # Fallback to system path
            cp /usr/lib/x86_64-linux-gnu/libgomp.so.1 nn_tilde/libgomp-98b21ff3.so.1
          fi
          # Optional: Strip debug symbols to reduce size
          strip nn_tilde/nn~.pd_linux
          strip nn_tilde/lib*.so*

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: nn_tilde-linux_${{ matrix.arch }}_${{ matrix.cuda }}
          path: nn_tilde

  windows-amd64-build:
    runs-on: windows-latest
    strategy:
      matrix:
        cuda: [cpu, cuda]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Visual Studio
        uses: microsoft/setup-msbuild@v2

      - name: Setup CUDA
        if: matrix.cuda == 'cuda'
        uses: Jimver/cuda-toolkit@v0.2.19
        id: cuda-toolkit
        with:
          cuda: '12.4.0'
          method: 'network'
          use-local-cache: true
          sub-packages: '["nvcc", "cudart", "nvrtc", "visual_studio_integration"]'
          # sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "cusparse", "cusparse_dev", "cufft", "cufft_dev", "cusolver", "cusolver_dev", "nvrtc", "visual_studio_integration"]'

      - name: Install NvToolsExt
        if: matrix.cuda == 'cuda'
        run: |
          New-Item -ItemType Directory -Force -Path "temp_build"
          Invoke-WebRequest -Uri "https://ossci-windows.s3.us-east-1.amazonaws.com/builder/NvToolsExt.7z" -OutFile "temp_build\NvToolsExt.7z"
          7z x temp_build\NvToolsExt.7z -otemp_build\NvToolsExt
          
          $nvToolsPath = "C:\Program Files\NVIDIA Corporation\NvToolsExt"
          New-Item -ItemType Directory -Force -Path "$nvToolsPath\bin\x64"
          New-Item -ItemType Directory -Force -Path "$nvToolsPath\include"
          New-Item -ItemType Directory -Force -Path "$nvToolsPath\lib\x64"
          
          Copy-Item "temp_build\NvToolsExt\bin\x64\*.*" -Destination "$nvToolsPath\bin\x64" -Force
          Copy-Item "temp_build\NvToolsExt\include\*.*" -Destination "$nvToolsPath\include" -Force
          Copy-Item "temp_build\NvToolsExt\lib\x64\*.*" -Destination "$nvToolsPath\lib\x64" -Force

      - name: Setup libtorch (CPU)
        if: matrix.cuda != 'cuda'
        run: |
          Invoke-WebRequest -Uri "https://download.pytorch.org/libtorch/cpu/libtorch-win-shared-with-deps-2.5.1%2Bcpu.zip" -OutFile libtorch.zip
          Expand-Archive -Path libtorch.zip -DestinationPath .

      - name: Setup libtorch (CUDA)
        if: matrix.cuda == 'cuda'
        run: |
          Invoke-WebRequest -Uri "https://download.pytorch.org/libtorch/cu124/libtorch-win-shared-with-deps-2.5.1%2Bcu124.zip" -OutFile libtorch.zip
          Expand-Archive -Path libtorch.zip -DestinationPath .

      - name: Setup PureData
        run: |
          mkdir pd
          cd pd
          curl -L https://msp.puredata.info/Software/pd-0.55-2.msw.zip -o pd.zip
          unzip pd.zip
          mv pd*/src .
          mv pd*/bin .

      - name: Build and Check Dependencies
        run: |
          $VSInstallPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          $DumpbinPath = Join-Path $VSInstallPath "VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe"
          $DumpbinExe = Get-ChildItem $DumpbinPath | Select-Object -First 1
          
          mkdir build
          cd build
          cmake ../src `
            -DCMAKE_PREFIX_PATH=${{ github.workspace }}/libtorch `
            -DPUREDATA_INCLUDE_DIR=${{ github.workspace }}/pd/src `
            -DPUREDATA_BIN_DIR=${{ github.workspace }}/pd/bin `
            -A x64 `
            $(if ("${{ matrix.cuda }}" -eq "cuda") { "-DCUDA_TOOLKIT_ROOT_DIR=C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.4" })

          cmake --build . --config Release
          
          if ("${{ matrix.cuda }}" -eq "cuda") {
            Write-Host "Checking DLL dependencies recursively..."
            cd frontend/puredata/nn_tilde/Release
            $seenDlls = @{}
            
            function Get-DllDeps {
                param($dllPath, $level = 0)
                $dllName = Split-Path $dllPath -Leaf
                if ($seenDlls.ContainsKey($dllName)) { return }
                $seenDlls[$dllName] = $true
                
                $indent = "  " * $level
                $deps = & $DumpbinExe /dependents $dllPath | Select-String "\.dll"
                foreach ($dep in $deps) {
                    $depName = $dep.ToString().Trim()
                    $depPath = Join-Path $PWD $depName
                    if (Test-Path $depPath) {
                        Write-Host "${indent}✓ Found: $depName"
                        Get-DllDeps $depPath ($level + 1)
                    } else {
                        Write-Host "${indent}✗ Missing: $depName"
                    }
                }
            }
            
            Get-DllDeps "nn~.dll"
          }

      - name: PureData Package Creation
        run: |
          mkdir nn_tilde
          # FIXME: lib exclusion shouldn't be necessary. check CMakeLists
          Get-ChildItem -Path build/frontend/puredata/nn_tilde/Release -Exclude *.lib | Copy-Item -Destination nn_tilde

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: nn_tilde-windows_amd64_${{ matrix.cuda }}
          path: nn_tilde

  AutomaticRelease:
    runs-on: ubuntu-latest
    needs: [macos-arm64-build, macos-amd64-build, windows-amd64-build, linux-build]
    permissions:
      contents: write
      actions: read
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release packages
        run: |
          cd artifacts
          zip -r ../nn_tilde-macos_arm64.zip nn_tilde-macos_arm64
          zip -r ../nn_tilde-macos_amd64.zip nn_tilde-macos_amd64
          zip -r ../nn_tilde-windows_amd64_cuda.zip nn_tilde-windows_amd64_cuda
          zip -r ../nn_tilde-linux_amd64_cuda.zip nn_tilde-linux_amd64_cuda
          zip -r ../nn_tilde-windows_amd64_cpu.zip nn_tilde-windows_amd64_cpu
          zip -r ../nn_tilde-linux_amd64_cpu.zip nn_tilde-linux_amd64_cpu
          zip -r ../nn_tilde-linux_arm64_cpu.zip nn_tilde-linux_arm64_cpu

      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: |
            nn_tilde-macos_arm64.zip
            nn_tilde-macos_amd64.zip
            nn_tilde-windows_amd64_cuda.zip
            nn_tilde-linux_amd64_cuda.zip
            nn_tilde-windows_amd64_cpu.zip
            nn_tilde-linux_amd64_cpu.zip
            nn_tilde-linux_arm64_cpu.zip

  deken_check_and_upload:
    runs-on: ubuntu-latest
    needs: [AutomaticRelease]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          path: nn_tilde-src

      - uses: actions/download-artifact@v4
        with:
          name: nn_tilde-macos_arm64
          path: nn_tilde-macos_arm64

      - uses: actions/download-artifact@v4
        with:
          name: nn_tilde-macos_amd64
          path: nn_tilde-macos_amd64

      - uses: actions/download-artifact@v4
        with:
          name: nn_tilde-windows_amd64_cuda
          path: nn_tilde-windows_amd64_cuda

      - uses: actions/download-artifact@v4
        with:
          name: nn_tilde-linux_amd64_cuda
          path: nn_tilde-linux_amd64_cuda

      - uses: actions/download-artifact@v4
        with:
          name: nn_tilde-windows_amd64_cpu
          path: nn_tilde-windows_amd64_cpu

      - uses: actions/download-artifact@v4
        with:
          name: nn_tilde-linux_amd64_cpu
          path: nn_tilde-linux_amd64_cpu

      - uses: actions/download-artifact@v4
        with:
          name: nn_tilde-linux_arm64_cpu
          path: nn_tilde-linux_arm64_cpu

      - name: Check Deken Package
        shell: bash
        run: |
          SHORT=${GITHUB_REF:11}
          SLUG=${SHORT//\//_}
         
          # CPU versions
          for os in macos_arm64 macos_amd64 windows_amd64_cpu linux_amd64_cpu linux_arm64_cpu; do
            echo "## ${os}" | tee -a $GITHUB_STEP_SUMMARY
            mkdir -p package-${os}
            docker run --rm --user $(id -u) \
              --volume ./nn_tilde-${os}:/nn~ \
              --volume ./package-${os}:/package \
              registry.git.iem.at/pd/deken \
              deken package --output-dir /package -v "${SLUG}" /nn~

            dek_files=$(ls package-${os}/*.dek)
            for dek_file in $dek_files; do
              echo '```' | tee -a $GITHUB_STEP_SUMMARY
              unzip -l "$dek_file" | tee -a $GITHUB_STEP_SUMMARY
              echo '```' | tee -a $GITHUB_STEP_SUMMARY
            done
          done

          # CUDA versions
          for os in windows_amd64_cuda linux_amd64_cuda; do
            echo "## ${os}" | tee -a $GITHUB_STEP_SUMMARY
            mkdir -p package-${os}
            docker run --rm --user $(id -u) \
              --volume ./nn_tilde-${os}:/nn~ \
              --volume ./package-${os}:/package \
              registry.git.iem.at/pd/deken \
              deken package --output-dir /package -v "${SLUG}-cuda" /nn~
 
            dek_files=$(ls package-${os}/*.dek)
            for dek_file in $dek_files; do
              echo '```' | tee -a $GITHUB_STEP_SUMMARY
              unzip -l "$dek_file" | tee -a $GITHUB_STEP_SUMMARY
              echo '```' | tee -a $GITHUB_STEP_SUMMARY
            done
          done

      - name: Upload to Deken
        if: ${{ !contains(github.ref, 'test') }}
        shell: bash
        env:
          DEKEN_USERNAME: ${{ secrets.DEKEN_USERNAME }}
          DEKEN_PASSWORD: ${{ secrets.DEKEN_PASSWORD }}
        run: |
          SHORT=${GITHUB_REF:11}
          SLUG=${SHORT//\//_}
          
          # CPU versions
          for os in macos_arm64 macos_amd64 windows_amd64_cpu linux_amd64_cpu linux_arm64_cpu; do
            docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD \
              --volume ./nn_tilde-${os}:/nn~ registry.git.iem.at/pd/deken \
              deken upload -v "${SLUG}" --name "nn~" --no-source-error /nn~
          done

          # CUDA versions
          for os in windows_amd64_cuda linux_amd64_cuda; do
            docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD \
              --volume ./nn_tilde-${os}:/nn~ registry.git.iem.at/pd/deken \
              deken upload -v "${SLUG}-cuda" --name "nn~" --no-source-error /nn~
          done

          # Source upload
          docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD \
            --volume ./nn_tilde-src:/nn~ registry.git.iem.at/pd/deken \
            deken upload -v "${SLUG}" --name "nn~" /nn~
